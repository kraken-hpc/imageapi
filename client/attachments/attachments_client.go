// Code generated by go-swagger; DO NOT EDIT.

package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attachments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attachments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAttach(params *DeleteAttachParams, opts ...ClientOption) (*DeleteAttachOK, error)

	Attach(params *AttachParams, opts ...ClientOption) (*AttachCreated, error)

	ListAttachments(params *ListAttachmentsParams, opts ...ClientOption) (*ListAttachmentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAttach Detach a specified attachment.
*/
func (a *Client) DeleteAttach(params *DeleteAttachParams, opts ...ClientOption) (*DeleteAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAttach",
		Method:             "DELETE",
		PathPattern:        "/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAttachDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Attach Create a new attachment based on attach specification
*/
func (a *Client) Attach(params *AttachParams, opts ...ClientOption) (*AttachCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attach",
		Method:             "POST",
		PathPattern:        "/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AttachDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListAttachments List attachments
*/
func (a *Client) ListAttachments(params *ListAttachmentsParams, opts ...ClientOption) (*ListAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAttachmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_attachments",
		Method:             "GET",
		PathPattern:        "/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAttachmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAttachmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
