// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachLoopback `attach_loopback` describes a loopback device based on an available file.
// The file can live either on `/` ("root") or a mount, as specified by base.
// Path specifies the path relative to the base.
//
//
// swagger:model attach_loopback
type AttachLoopback struct {

	// base determines the relative root for the path.  There are two options:
	// `root` means to use the current root (`/`) as the base path.
	// `mount` means to use a mount as the base path. If this is specified, `mount` must be specified as well.
	//
	// Required: true
	// Enum: [root mount]
	Base *string `json:"base"`

	// mount
	Mount *Mount `json:"mount,omitempty"`

	// A unix-formatted filesystem path with `/` relative to the respective base.
	// Required: true
	Path *string `json:"path"`

	// Should the partition table on the looback device be read?
	// Addressing sub-partitions is not yet supported.
	//
	ReadPartitions *bool `json:"readPartitions,omitempty"`
}

// Validate validates this attach loopback
func (m *AttachLoopback) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attachLoopbackTypeBasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["root","mount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachLoopbackTypeBasePropEnum = append(attachLoopbackTypeBasePropEnum, v)
	}
}

const (

	// AttachLoopbackBaseRoot captures enum value "root"
	AttachLoopbackBaseRoot string = "root"

	// AttachLoopbackBaseMount captures enum value "mount"
	AttachLoopbackBaseMount string = "mount"
)

// prop value enum
func (m *AttachLoopback) validateBaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attachLoopbackTypeBasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttachLoopback) validateBase(formats strfmt.Registry) error {

	if err := validate.Required("base", "body", m.Base); err != nil {
		return err
	}

	// value enum
	if err := m.validateBaseEnum("base", "body", *m.Base); err != nil {
		return err
	}

	return nil
}

func (m *AttachLoopback) validateMount(formats strfmt.Registry) error {
	if swag.IsZero(m.Mount) { // not required
		return nil
	}

	if m.Mount != nil {
		if err := m.Mount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mount")
			}
			return err
		}
	}

	return nil
}

func (m *AttachLoopback) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this attach loopback based on the context it is used
func (m *AttachLoopback) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachLoopback) contextValidateMount(ctx context.Context, formats strfmt.Registry) error {

	if m.Mount != nil {
		if err := m.Mount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachLoopback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachLoopback) UnmarshalBinary(b []byte) error {
	var res AttachLoopback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
