// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountAttach `mount_attach` describes an attach mount.  This must have at least attach ID associated with it,
// and a provided filesystem type.
//
// Either `attach_id` or `attach` must be specified.  If both are specified, `attach` will be ignored.
//
// If `attach` is specified and `attach_id` is omitted, the specified attach will first be attached, and will be
// detached on deletion.
//
//
// swagger:model mount_attach
type MountAttach struct {

	// attach
	Attach *Attach `json:"attach,omitempty"`

	// attach id
	AttachID ID `json:"attach_id,omitempty"`

	// fs type
	// Required: true
	FsType *string `json:"fs_type"`

	// these mount options will be passed to the mount syscall. Supported options depend on filesystem type.
	MountOptions []string `json:"mount_options"`
}

// Validate validates this mount attach
func (m *MountAttach) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountAttach) validateAttach(formats strfmt.Registry) error {
	if swag.IsZero(m.Attach) { // not required
		return nil
	}

	if m.Attach != nil {
		if err := m.Attach.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attach")
			}
			return err
		}
	}

	return nil
}

func (m *MountAttach) validateAttachID(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachID) { // not required
		return nil
	}

	if err := m.AttachID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attach_id")
		}
		return err
	}

	return nil
}

func (m *MountAttach) validateFsType(formats strfmt.Registry) error {

	if err := validate.Required("fs_type", "body", m.FsType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mount attach based on the context it is used
func (m *MountAttach) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttach(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttachID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountAttach) contextValidateAttach(ctx context.Context, formats strfmt.Registry) error {

	if m.Attach != nil {
		if err := m.Attach.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attach")
			}
			return err
		}
	}

	return nil
}

func (m *MountAttach) contextValidateAttachID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AttachID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attach_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountAttach) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountAttach) UnmarshalBinary(b []byte) error {
	var res MountAttach
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
