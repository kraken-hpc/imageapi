// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RbdOptions rbd options
//
// swagger:model rbd_options
type RbdOptions struct {

	// abort on full
	AbortOnFull bool `json:"abort_on_full,omitempty"`

	// alloc size
	AllocSize int64 `json:"alloc_size,omitempty"`

	// ceph requires signatures
	CephRequiresSignatures bool `json:"ceph_requires_signatures,omitempty"`

	// cephx sign messages
	CephxSignMessages bool `json:"cephx_sign_messages,omitempty"`

	// crc
	Crc bool `json:"crc,omitempty"`

	// exclusive
	Exclusive bool `json:"exclusive,omitempty"`

	// force
	Force bool `json:"force,omitempty"`

	// fsid
	Fsid string `json:"fsid,omitempty"`

	// ip
	// Pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
	// Format: ipv4
	IP strfmt.IPv4 `json:"ip,omitempty"`

	// lock on read
	LockOnRead bool `json:"lock_on_read,omitempty"`

	// lock timeout
	LockTimeout int64 `json:"lock_timeout,omitempty"`

	// mount timeout
	MountTimeout int64 `json:"mount_timeout,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// noceph requires signatures
	NocephRequiresSignatures bool `json:"noceph_requires_signatures,omitempty"`

	// nocephx sign messages
	NocephxSignMessages bool `json:"nocephx_sign_messages,omitempty"`

	// nocrc
	Nocrc bool `json:"nocrc,omitempty"`

	// noshare
	Noshare bool `json:"noshare,omitempty"`

	// notcp nodelay
	NotcpNodelay bool `json:"notcp_nodelay,omitempty"`

	// notrim
	Notrim bool `json:"notrim,omitempty"`

	// osd idle ttl
	OsdIdleTTL int64 `json:"osd_idle_ttl,omitempty"`

	// osdkeepalive
	Osdkeepalive int64 `json:"osdkeepalive,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queue_depth,omitempty"`

	// ro
	Ro bool `json:"ro,omitempty"`

	// rw
	Rw bool `json:"rw,omitempty"`

	// secret
	Secret string `json:"secret,omitempty"`

	// share
	Share bool `json:"share,omitempty"`

	// tcp nodelay
	TCPNodelay bool `json:"tcp_nodelay,omitempty"`
}

// Validate validates this rbd options
func (m *RbdOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RbdOptions) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if err := validate.Pattern("ip", "body", m.IP.String(), `^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$`); err != nil {
		return err
	}

	if err := validate.FormatOf("ip", "body", "ipv4", m.IP.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rbd options based on context it is used
func (m *RbdOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RbdOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RbdOptions) UnmarshalBinary(b []byte) error {
	var res RbdOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
