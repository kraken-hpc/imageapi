// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachIscsi `attach_iscsi` describes an block device available as an iSCSI attachment.
// Currently, only AuthType=None is supported.
// A target are required, and should both be in IQN format.
// Host is required and can be an IP or hostname.
// If lun is not specified, it will default to lun0.
//
//
// swagger:model attach_iscsi
type AttachIscsi struct {

	// IP or hostname of target host
	// Required: true
	Host *string `json:"host"`

	// iSCSI initiator IQN
	// Required: true
	Initiator *string `json:"initiator"`

	// iSCSI lun on the target to select
	Lun int64 `json:"lun,omitempty"`

	// Max oustanding iSCSI commands
	MaxComands *int64 `json:"max_comands,omitempty"`

	// Port where the target is listening (default 3260)
	Port *int64 `json:"port,omitempty"`

	// Max oustanding IOs
	QueueDepth *int64 `json:"queue_depth,omitempty"`

	// Block device scheduler
	Scheduler *string `json:"scheduler,omitempty"`

	// IQN of the iSCSI target
	// Required: true
	Target *string `json:"target"`
}

// Validate validates this attach iscsi
func (m *AttachIscsi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachIscsi) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *AttachIscsi) validateInitiator(formats strfmt.Registry) error {

	if err := validate.Required("initiator", "body", m.Initiator); err != nil {
		return err
	}

	return nil
}

func (m *AttachIscsi) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attach iscsi based on context it is used
func (m *AttachIscsi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttachIscsi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachIscsi) UnmarshalBinary(b []byte) error {
	var res AttachIscsi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
