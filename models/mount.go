// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Mount Generically address mounts by kind and ID or definition
// Either an `mount_id` or a mount definition must be supplied.
// If both are supplied, the mount definition will be ignored.
// If `mount_id` is specified, then the kind/id will be used to reference that mount.
// If no `mount_id` is supplied a defition of type `kind` must be present.
//
//
// swagger:model mount
type Mount struct {

	// attach
	Attach *MountAttach `json:"attach,omitempty"`

	// id
	ID ID `json:"id,omitempty"`

	// Kind specifies the kind of mount.  Each kind has corresponding kind-specific options.
	//
	// Currently known kinds:
	//
	// attach - mount a device specified by an attachment.
	// bind - bind mount a local directory
	// nfs - mount an NFS filesystem
	// overlay - overlay mount over an existing mount
	// uri - download a file from a URI and extract it into a ramdisk mount
	//
	// All kinds may or may not be fully supported by the implementation.
	//
	// Enum: [attach bind nfs overlay uri]
	Kind string `json:"kind,omitempty"`

	// mountpoint
	// Read Only: true
	Mountpoint string `json:"mountpoint,omitempty"`

	// overlay
	Overlay *MountOverlay `json:"overlay,omitempty"`

	// refs
	// Read Only: true
	Refs int64 `json:"refs,omitempty"`
}

// Validate validates this mount
func (m *Mount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverlay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mount) validateAttach(formats strfmt.Registry) error {
	if swag.IsZero(m.Attach) { // not required
		return nil
	}

	if m.Attach != nil {
		if err := m.Attach.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attach")
			}
			return err
		}
	}

	return nil
}

func (m *Mount) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var mountTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["attach","bind","nfs","overlay","uri"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mountTypeKindPropEnum = append(mountTypeKindPropEnum, v)
	}
}

const (

	// MountKindAttach captures enum value "attach"
	MountKindAttach string = "attach"

	// MountKindBind captures enum value "bind"
	MountKindBind string = "bind"

	// MountKindNfs captures enum value "nfs"
	MountKindNfs string = "nfs"

	// MountKindOverlay captures enum value "overlay"
	MountKindOverlay string = "overlay"

	// MountKindURI captures enum value "uri"
	MountKindURI string = "uri"
)

// prop value enum
func (m *Mount) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mountTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Mount) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Mount) validateOverlay(formats strfmt.Registry) error {
	if swag.IsZero(m.Overlay) { // not required
		return nil
	}

	if m.Overlay != nil {
		if err := m.Overlay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlay")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount based on the context it is used
func (m *Mount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttach(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverlay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mount) contextValidateAttach(ctx context.Context, formats strfmt.Registry) error {

	if m.Attach != nil {
		if err := m.Attach.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attach")
			}
			return err
		}
	}

	return nil
}

func (m *Mount) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Mount) contextValidateMountpoint(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mountpoint", "body", string(m.Mountpoint)); err != nil {
		return err
	}

	return nil
}

func (m *Mount) contextValidateOverlay(ctx context.Context, formats strfmt.Registry) error {

	if m.Overlay != nil {
		if err := m.Overlay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlay")
			}
			return err
		}
	}

	return nil
}

func (m *Mount) contextValidateRefs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "refs", "body", int64(m.Refs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Mount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Mount) UnmarshalBinary(b []byte) error {
	var res Mount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
