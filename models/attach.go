// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attach Generically address attachments.  Attachments are objects that ultimately provide a block device file.
//
//
// swagger:model attach
type Attach struct {

	// The device_file is the path to the system device file.
	// Read Only: true
	DeviceFile string `json:"device_file,omitempty"`

	// id
	// Read Only: true
	ID ID `json:"id,omitempty"`

	// Kind specifies the kind of attachment.  Each kind has corresponding kind-specific options.
	//
	// Currently known kinds:
	//
	// iscsi - attach an iscsi lun
	// local - create an attachment reference to an existing block device (specifying a non-block device will fail)
	// loopback - create a loopback device referencing a file in a mount
	// rbd - attach a Ceph/RBD object
	//
	// All kinds may or may not be fully supported by the implementation.
	//
	// Enum: [iscsi local loopback rbd]
	Kind string `json:"kind,omitempty"`

	// rbd
	Rbd *AttachRbd `json:"rbd,omitempty"`

	// refs
	// Read Only: true
	Refs int64 `json:"refs,omitempty"`
}

// Validate validates this attach
func (m *Attach) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRbd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attach) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

var attachTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iscsi","local","loopback","rbd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachTypeKindPropEnum = append(attachTypeKindPropEnum, v)
	}
}

const (

	// AttachKindIscsi captures enum value "iscsi"
	AttachKindIscsi string = "iscsi"

	// AttachKindLocal captures enum value "local"
	AttachKindLocal string = "local"

	// AttachKindLoopback captures enum value "loopback"
	AttachKindLoopback string = "loopback"

	// AttachKindRbd captures enum value "rbd"
	AttachKindRbd string = "rbd"
)

// prop value enum
func (m *Attach) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attachTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Attach) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Attach) validateRbd(formats strfmt.Registry) error {
	if swag.IsZero(m.Rbd) { // not required
		return nil
	}

	if m.Rbd != nil {
		if err := m.Rbd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this attach based on the context it is used
func (m *Attach) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRbd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attach) contextValidateDeviceFile(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "device_file", "body", string(m.DeviceFile)); err != nil {
		return err
	}

	return nil
}

func (m *Attach) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Attach) contextValidateRbd(ctx context.Context, formats strfmt.Registry) error {

	if m.Rbd != nil {
		if err := m.Rbd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *Attach) contextValidateRefs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "refs", "body", int64(m.Refs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attach) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attach) UnmarshalBinary(b []byte) error {
	var res Attach
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
