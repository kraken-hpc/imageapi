// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerScript A `uinit` style script to be executed on container load/unload.
//
// Scripts can be passed in several ways, as specified by `encoding`:
// - `file` : `script` must be a path to a valid file on the root filesystem.
// - `container_file` : `script` must be a path to a valid file in the contianer filesystem.
// - `plain` : multi-line script string.
// - `base64` : base64 encoded script string.
// - `gzip` : gzip + base64 encoded script string.
// - `bzip2` : bzip2 + base64 encoded script string.
//
//
// swagger:model container_script
type ContainerScript struct {

	// The type of script specification contained in `script`
	// Enum: [file container_file plain base64 gzip bzip2]
	Encoding string `json:"encoding,omitempty"`

	// The last error message reported by this script
	// Read Only: true
	LastError string `json:"last_error,omitempty"`

	// Any script failure is considered fatal
	Must *bool `json:"must,omitempty"`

	// String either containing the script, or a script file location
	Script string `json:"script,omitempty"`

	// Was the last run of this script successful
	// Read Only: true
	Success *bool `json:"success,omitempty"`
}

// Validate validates this container script
func (m *ContainerScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerScriptTypeEncodingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["file","container_file","plain","base64","gzip","bzip2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerScriptTypeEncodingPropEnum = append(containerScriptTypeEncodingPropEnum, v)
	}
}

const (

	// ContainerScriptEncodingFile captures enum value "file"
	ContainerScriptEncodingFile string = "file"

	// ContainerScriptEncodingContainerFile captures enum value "container_file"
	ContainerScriptEncodingContainerFile string = "container_file"

	// ContainerScriptEncodingPlain captures enum value "plain"
	ContainerScriptEncodingPlain string = "plain"

	// ContainerScriptEncodingBase64 captures enum value "base64"
	ContainerScriptEncodingBase64 string = "base64"

	// ContainerScriptEncodingGzip captures enum value "gzip"
	ContainerScriptEncodingGzip string = "gzip"

	// ContainerScriptEncodingBzip2 captures enum value "bzip2"
	ContainerScriptEncodingBzip2 string = "bzip2"
)

// prop value enum
func (m *ContainerScript) validateEncodingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, containerScriptTypeEncodingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContainerScript) validateEncoding(formats strfmt.Registry) error {
	if swag.IsZero(m.Encoding) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncodingEnum("encoding", "body", m.Encoding); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this container script based on the context it is used
func (m *ContainerScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerScript) contextValidateLastError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_error", "body", string(m.LastError)); err != nil {
		return err
	}

	return nil
}

func (m *ContainerScript) contextValidateSuccess(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerScript) UnmarshalBinary(b []byte) error {
	var res ContainerScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
