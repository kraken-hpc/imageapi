// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteContainerHandlerFunc turns a function with the right signature into a delete container handler
type DeleteContainerHandlerFunc func(DeleteContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteContainerHandlerFunc) Handle(params DeleteContainerParams) middleware.Responder {
	return fn(params)
}

// DeleteContainerHandler interface for that can handle valid delete container params
type DeleteContainerHandler interface {
	Handle(DeleteContainerParams) middleware.Responder
}

// NewDeleteContainer creates a new http.Handler for the delete container operation
func NewDeleteContainer(ctx *middleware.Context, handler DeleteContainerHandler) *DeleteContainer {
	return &DeleteContainer{Context: ctx, Handler: handler}
}

/* DeleteContainer swagger:route DELETE /container containers deleteContainer

Delete a container defition.
Either `id` or `name` query parameter must be specified.


*/
type DeleteContainer struct {
	Context *middleware.Context
	Handler DeleteContainerHandler
}

func (o *DeleteContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteContainerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
